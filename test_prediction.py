# -*- coding: utf-8 -*-
"""combined_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ks7KjFA54D46nNVIT_MzPcqLP7gw-HA
"""

import warnings
warnings.filterwarnings('ignore')

"""# Data Import and Cleaning"""

import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile
import datetime, time, requests
from bs4 import BeautifulSoup
from holiday_jp import HolidayJp
from openpyxl import load_workbook
import sys

wb = load_workbook("restaurant_data.xlsx")

sheet = wb.worksheets[0]

rows=sheet.max_row+1

# determine if the there is a holiday or not

for i in range(3,rows):
    row_date = datetime.datetime.strptime(str(sheet.cell(row=i, column=1).value), "%Y-%m-%d")
    if HolidayJp(row_date).is_holiday:
        sheet.cell(row=i, column=3).value = "Yes"

wb.save("restaurant_data.xlsx")

# url = "https://holidays-jp.github.io/api/v1/date.json"
# response = requests.get(url)  #check if page exists or not

# soup = str(BeautifulSoup(response.text, "html.parser"))
wb = load_workbook("restaurant_data.xlsx")

sheet = wb.worksheets[0]

rows=sheet.max_row+1
wds={"0":"月","1":"火","2":"水","3":"木","4":"金","5":"土","6":"日"}
for i in range(0,7):
    # sheet.cell(row=rows, column=1).value=(str(datetime.datetime.today() + datetime.timedelta(days=(i+0))))
    # sheet.cell(row=rows, column=2).value=(wds[str((datetime.datetime.today() + datetime.timedelta(days=(i+0))).weekday())])
    # if str(datetime.datetime.today() + datetime.timedelta(days=(i+0)))[:10] in soup:
    #     sheet.cell(row=rows, column=3).value=("Yes")
    # else:
    #     sheet.cell(row=rows, column=3).value=("No")
    # rows+=1
    date_to_be_inserted = datetime.datetime.today() + datetime.timedelta(days=i)
    sheet.cell(row=rows, column=1).value = (date_to_be_inserted.strftime("%Y-%m-%d"))
    sheet.cell(row=rows, column=2).value = (wds[str(date_to_be_inserted.weekday())])
    if HolidayJp(date_to_be_inserted).is_holiday:
        sheet.cell(row=rows, column=3).value=("Yes")

    rows+=1
wb.save("restaurant_data.xlsx")
df = pd.read_excel('restaurant_data.xlsx')
print(df)

import numpy as np

# df.head(4)

# df.info()

df = df.drop([df.index[0]])

# df.head(4)

df['Month'] = pd.to_datetime(df.Date).dt.month
df['Day of Month'] = pd.to_datetime(df.Date).dt.day

# df.head(3)

def find_national_holidays(x):
  x = str(x)
  x = x[0:3]
  y = int()
  if x == "Yes":
    y = 1
  else:
    y = 0
  return y

df['National Holidays'] = df['Holidays'].apply(find_national_holidays)

def find_conventional_holidays(x):
  x = str(x)
  x = x[0:2]
  y = int()
  if x == "No":
    y = 1
  else:
    y = 0
  return y

df['Conventional Holidays'] = df['Holidays'].apply(find_conventional_holidays)

# df.head(10)

# df.info()

weekdays = {
"月" :"Mon" ,
"火" :"Tue",
"水" :"Wed",
"木" :"Thurs",
"金" :"Fri",
"土" : "Sat",
"日" : "Sun"
}

weather ={
"1":"Sunny",
"2":"Cloudy",
"3":"Rainy",
"4":"Snowy",
"5":"Stormy"
}

def get_weekdays(x):
  return weekdays[x]

df['Day'] = df['Day'].apply(get_weekdays)

# def get_weather(x):
#   x = str(x)
#   return weather[x]

# df['Weather/Lunch'] = df['Weather/Lunch'].apply(get_weather)

# df['Weather/Dinner'] = df['Weather/Dinner'].apply(get_weather)

df.shape

df = df[['Date', 'Day', 'Holidays', 'Sales/Lunch', 'Customers/Lunch', 'Sales/Dinner', 'Customers/Dinner', 'Month', 'Day of Month', 'National Holidays', 'Conventional Holidays']]
future_pred = df.tail(7)
df = df.head(df.shape[0]-7)
df = df.dropna().reset_index(drop=True)

# df.info()


prev_day_sales = df['Sales/Lunch'].shift(1)

prev_day_sales[0] = prev_day_sales[1]

customers_lunch = df['Customers/Lunch']

# df.head(3)

prev_night_sales = df['Sales/Dinner'].shift(1)
prev_night_sales[0] = prev_night_sales[1]

# current_top_page_view_lunch = df['Lunch Toppage View']

# prev_top_page_views = df['Dinner Toppage View'].shift(1)
# prev_top_page_views[1] = prev_top_page_views[2]

# prev_top_page_views = df['Dinner Toppage View'].shift(1)
# prev_top_page_views[1] = prev_top_page_views[2]

prev_night_customers = df['Customers/Dinner'].shift(1)
prev_night_customers[0] = prev_night_customers[1]

prev_day_customers = df['Customers/Lunch'].shift(1)
prev_day_customers[0] = prev_day_customers[1]

prophet_df_prev_day_customers = df[['Date','National Holidays', 'Conventional Holidays']]

prophet_df_prev_day_customers

prophet_df_prev_day_customers['Date'] = pd.to_datetime(df['Date'])

prophet_df_prev_day_customers['Customers/Lunch'] = customers_lunch

prophet_df_prev_day_customers['Prev Night Sales'] = prev_night_sales

prophet_df_prev_day_customers['Prev Day Sales'] = prev_day_sales

prophet_df_prev_day_customers['Prev Night Customers'] = prev_night_customers

prophet_df_prev_day_customers['Prev Customers'] = prev_day_customers

# prophet_df_prev_day_customers['Prev Pageview'] = prev_top_page_views

# prophet_df_prev_day_customers['Current Pageview'] = current_top_page_view_lunch


# df['Conventional Holidays'].tail(9)

from prophet import Prophet

prophet_prev_day_customers = Prophet()

prophet_df_prev_day_customers = prophet_df_prev_day_customers.rename(columns = {
    'Customers/Lunch' : 'y',
    'Date' : 'ds'
})

prophet_prev_day_customers.add_regressor('National Holidays')
prophet_prev_day_customers.add_regressor('Conventional Holidays')
prophet_prev_day_customers.add_regressor('Prev Night Customers')
prophet_prev_day_customers.add_regressor('Prev Night Sales')
prophet_prev_day_customers.add_regressor('Prev Day Sales')
prophet_prev_day_customers.add_regressor('Prev Customers')
# prophet_prev_day_customers.add_regressor('Prev Pageview')
# prophet_prev_day_customers.add_regressor('Current Pageview')

prophet_prev_day_customers.fit(prophet_df_prev_day_customers)



future = future_pred

future.shape

customers_prophet = Prophet()

# df.head()

# future.head()



def find_conventional_holidays(x):
  x = str(x)
  x = x[0:2]
  y = int()
  if x == "No":
    y = 1
  else:
    y = 0
  return y

future['Conventional Holidays'] = future['Holidays'].apply(find_conventional_holidays)



def find_national_holidays(x):
  x = str(x)
  x = x[0:3]
  y = int()
  if x == "Yes":
    y = 1
  else:
    y = 0
  return y

future['National Holidays'] = future['Holidays'].apply(find_national_holidays)

future_final = pd.DataFrame()
future_final['ds'] = future['Date']
future_final['National Holidays'] = future['National Holidays']
future_final['Conventional Holidays'] = future['Conventional Holidays']

future_final = future_final.reset_index().drop('index', axis = 1)

customers_prophet.fit((prophet_df_prev_day_customers[['ds','Prev Night Customers']]).rename(columns = {
    'Prev Night Customers' : 'y'}))

# df['Website GA PVs\nTop page']

pred_prev_night_customers = customers_prophet.predict(future_final)

pred_prev_night_customers

pred_prev_night_customers = pred_prev_night_customers['yhat']

sales_prophet = Prophet()

sales_prophet.fit((prophet_df_prev_day_customers[['ds','Prev Night Sales']]).rename(columns = {
    'Prev Night Sales' : 'y'}))

pred_prev_night_sales = sales_prophet.predict(future_final)

pred_prev_night_sales = pred_prev_night_sales['yhat']
# print('eta prev night sales')
# # print(pred_prev_night_sales)

prev_day_customers_prophet = Prophet()

prev_day_customers_prophet.fit((prophet_df_prev_day_customers[['ds','Prev Night Customers']]).rename(columns = {
    'Prev Night Customers' : 'y'}))

pred_prev_day_customers = prev_day_customers_prophet.predict(future_final)

pred_prev_day_customers = pred_prev_day_customers['yhat']

future_final

prev_day_sales_prophet = Prophet()
prev_day_sales_prophet.fit((prophet_df_prev_day_customers[['ds','Prev Day Sales']]).rename(columns = {
    'Prev Day Sales' : 'y'}))
pred_prev_day_sales = prev_day_sales_prophet.predict(future_final)

pred_prev_day_sales = pred_prev_day_sales['yhat']

# prev_pageview_prophet = Prophet()
# prev_pageview_prophet.fit((prophet_df_prev_day_customers[['ds','Prev Pageview']]).rename(columns = {
#     'Prev Pageview' : 'y'}))
# pred_prev_pageview = prev_pageview_prophet.predict(future_final)

# pred_prev_pageview = pred_prev_pageview['yhat']

# pred_prev_pageview

# current_pageview_prophet = Prophet()
# current_pageview_prophet.fit((prophet_df_prev_day_customers[['ds','Current Pageview']]).rename(columns = {
#     'Current Pageview' : 'y'}))
# current_pageview = current_pageview_prophet.predict(future_final)

# current_pageview

future_final

# current_pageview = current_pageview['yhat']

# current_pageview

future_final.shape

# current_pageview.head(3)

len(pred_prev_night_customers)

# future['National Holidays'] = prophet_df_prev_day_customers.reset_index()['National Holidays']
# future['Conventional Holidays'] = prophet_df_prev_day_customers.reset_index()['Conventional Holidays']
future_final['Prev Night Customers'] = pred_prev_night_customers
future_final['Prev Night Sales'] = pred_prev_night_sales
future_final['Prev Day Sales'] = pred_prev_day_sales
future_final['Prev Customers'] = pred_prev_day_customers
# future_final['Prev Pageview'] = pred_prev_pageview
# future_final['Current Pageview'] = current_pageview
# future_final['National Holidays'] = f['National Holidays']
# future_final['Conventional Holidays'] = df['Conventional Holidays']

# df['National Holidays']

# future = future.tail(9)

future_final

def change_to_int(x):
  return int(np.floor(x+0.5))

future_final['Prev Night Customers'] = future_final['Prev Night Customers'].apply(change_to_int)
future_final['Prev Night Sales'] = future_final['Prev Night Sales'].apply(change_to_int)
future_final['Prev Day Sales'] = future_final['Prev Day Sales'].apply(change_to_int)
future_final['Prev Customers'] = future_final['Prev Customers'].apply(change_to_int)
# future_final['Prev Pageview'] = future_final['Prev Pageview'].apply(change_to_int)
# future_final['Current Pageview'] = future_final['Current Pageview'].apply(change_to_int)

future['Conventional Holidays'] = future['Conventional Holidays'].astype(int)
future['National Holidays'] = future['National Holidays'].astype(int)

# print('eta futute final')
# print(future_final)
# import pickle
# with open('model_lunch_pickle', 'wb') as f:
#   pickle.dump(prophet_prev_day_customers,f)

forecast = prophet_prev_day_customers.predict(future_final)

forecast['yhat'] = forecast['yhat'].apply(change_to_int)

final_forecast = forecast['yhat']

final_forecast

date = forecast['ds']

# print(date)

df = pd.DataFrame(date)

df1 = pd.DataFrame(final_forecast)

df = df.join(df1)
# print('eta final df')
# print(df)

df.rename(columns= {'yhat' : 'Forecast', 'ds' : 'Date'}, inplace= True)

df.to_excel('lunch-forecast.xlsx')



import warnings
warnings.filterwarnings('ignore')

"""# Data Import and Cleaning"""

import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile
df = pd.read_excel('restaurant_data.xlsx')

import numpy as np

df.shape

df.info()

df = df.drop([df.index[0]])

df.head(4)

df['Month'] = pd.to_datetime(df.Date).dt.month
df['Day of Month'] = pd.to_datetime(df.Date).dt.day

df.head(3)

def find_national_holidays(x):
  x = str(x)
  x = x[0:3]
  y = int()
  if x == "Yes":
    y = 1
  else:
    y = 0
  return y

df['National Holidays'] = df['Holidays'].apply(find_national_holidays)

def find_conventional_holidays(x):
  x = str(x)
  x = x[0:2]
  y = int()
  if x == "No":
    y = 1
  else:
    y = 0
  return y

df['Conventional Holidays'] = df['Holidays'].apply(find_conventional_holidays)

df.tail(10)

df.info()

weekdays = {
"月" :"Mon" ,
"火" :"Tue",
"水" :"Wed",
"木" :"Thurs",
"金" :"Fri",
"土" : "Sat",
"日" : "Sun"
}

weather ={
"1":"Sunny",
"2":"Cloudy",
"3":"Rainy",
"4":"Snowy",
"5":"Stormy"
}

def get_weekdays(x):
  return weekdays[x]

df['Day'] = df['Day'].apply(get_weekdays)

# def get_weather(x):
#   x = str(x)
#   return weather[x]

# df['Weather/Lunch'] = df['Weather/Lunch'].apply(get_weather)

# df['Weather/Dinner'] = df['Weather/Dinner'].apply(get_weather)

# df.head(3)

# df.info()

df = df[['Date', 'Day', 'Holidays', 'Sales/Lunch', 'Customers/Lunch', 'Sales/Dinner', 'Customers/Dinner', 'Month', 'Day of Month', 'National Holidays', 'Conventional Holidays']]

future_pred = df.tail(7)
df = df.head(df.shape[0]-7)

# df.info()

df = df.dropna().reset_index(drop= True)

# df.info()

# future_df = df.tail(9)

# df = df.head(df.shape[0] - 9)

type(df['Sales/Lunch'][1])

prev_day_sales = df['Sales/Lunch'].shift(1)

prev_day_sales[0] = prev_day_sales[1]

prev_day_sales

customers_lunch = df['Customers/Lunch'].astype(int)

df['Sales/Dinner']

prev_night_sales = df['Sales/Dinner'].shift(1)
prev_night_sales[0] = prev_night_sales[1]

prev_night_sales

# current_top_page_view_lunch = df['Lunch Toppage View'].astype(int)

# prev_top_page_views = df['Dinner Toppage View'].astype(int).shift(1)
# prev_top_page_views[1] = prev_top_page_views[2]

# prev_top_page_views = df['Dinner Toppage View'].astype(int).shift(1)
# prev_top_page_views[1] = prev_top_page_views[2]

prev_night_customers = df['Customers/Dinner'].shift(1)
prev_night_customers[0] = prev_night_customers[1]

prev_night_customers

prev_day_customers = df['Customers/Lunch'].shift(1)
prev_day_customers[0] = prev_day_customers[1]

customers_dinner = df['Customers/Dinner']

prophet_df_prev_lunch_customers_dinner = df[['Date','National Holidays', 'Conventional Holidays']]

prophet_df_prev_lunch_customers_dinner['Date'] = pd.to_datetime(df['Date'])

prophet_df_prev_lunch_customers_dinner['Customers/Dinner'] = customers_dinner

prophet_df_prev_lunch_customers_dinner['Prev Night Sales'] = prev_night_sales

prophet_df_prev_lunch_customers_dinner['Prev Night Customers'] = prev_night_customers

prophet_df_prev_lunch_customers_dinner['Lunch Customers'] = customers_lunch

prev_lunch_customers = df['Customers/Lunch'].shift(1)
prev_lunch_customers[0] = prev_lunch_customers[1]

prophet_df_prev_lunch_customers_dinner['Prev Lunch Customers'] = prev_lunch_customers

lunch_sales = df['Sales/Lunch']

prophet_df_prev_lunch_customers_dinner['Lunch Sales'] = lunch_sales

# prophet_df_prev_day_customers['Prev Pageview'] = prev_top_page_views

# prophet_df_prev_day_customers['Current Pageview'] = current_top_page_view_lunch

prophet_df_prev_lunch_customers_dinner['National Holidays'] = df['National Holidays']
prophet_df_prev_lunch_customers_dinner['Conventional Holidays'] = df['Conventional Holidays']


from prophet import Prophet

prophet_prev_lunch_customers_dinner = Prophet()

prophet_df_prev_lunch_customers_dinner = prophet_df_prev_lunch_customers_dinner.rename(columns = {
    'Customers/Dinner' : 'y',
    'Date' : 'ds'
})

# prophet_prev_lunch_customers_dinner.add_regressor('National Holidays')
# prophet_prev_lunch_customers_dinner.add_regressor('Conventional Holidays')
prophet_prev_lunch_customers_dinner.add_regressor('Prev Night Customers')
prophet_prev_lunch_customers_dinner.add_regressor('Prev Night Sales')
prophet_prev_lunch_customers_dinner.add_regressor('Lunch Sales')
prophet_prev_lunch_customers_dinner.add_regressor('Lunch Customers')
prophet_prev_lunch_customers_dinner.add_regressor('Prev Lunch Customers')
prophet_prev_lunch_customers_dinner.add_regressor('National Holidays')
prophet_prev_lunch_customers_dinner.add_regressor('Conventional Holidays')
prophet_prev_lunch_customers_dinner.add_regressor('Lunch Customers')

prophet_prev_lunch_customers_dinner.fit(prophet_df_prev_lunch_customers_dinner)



# future = prophet_prev_lunch_customers_dinner.make_future_dataframe(periods = 0)
future = future_pred

future.shape

customers_prophet = Prophet()

future.tail()

def find_conventional_holidays(x):
  x = str(x)
  x = x[0:2]
  y = int()
  if x == "No":
    y = 1
  else:
    y = 0
  return y

future['Conventional Holidays'] = future['Holidays'].apply(find_conventional_holidays)

def find_national_holidays(x):
  x = str(x)
  x = x[0:3]
  y = int()
  if x == "Yes":
    y = 1
  else:
    y = 0
  return y

future['National Holidays'] = future['Holidays'].apply(find_national_holidays)

future_final = pd.DataFrame()
future_final['ds'] = future['Date']
future_final['National Holidays'] = future['National Holidays']
future_final['Conventional Holidays'] = future['Conventional Holidays']

future_final = future_final.reset_index().drop('index', axis = 1)



customers_prophet.fit((prophet_df_prev_lunch_customers_dinner[['ds','Prev Night Customers']]).rename(columns = {
    'Prev Night Customers' : 'y'}))

pred_prev_night_customers = customers_prophet.predict(future_final)

pred_prev_night_customers = pred_prev_night_customers['yhat']

prophet_df_prev_lunch_customers_dinner.head(3)

sales_prophet = Prophet()

sales_prophet.fit((prophet_df_prev_lunch_customers_dinner[['ds','Prev Night Sales']]).rename(columns = {
    'Prev Night Sales' : 'y'}))

pred_prev_night_sales = sales_prophet.predict(future_final)

pred_prev_night_sales = pred_prev_night_sales['yhat']

prev_day_customers_prophet = Prophet()

prev_day_customers_prophet.fit((prophet_df_prev_lunch_customers_dinner[['ds','Prev Night Customers']]).rename(columns = {
    'Prev Night Customers' : 'y'}))

pred_prev_day_customers = prev_day_customers_prophet.predict(future_final)

pred_prev_day_customers = pred_prev_day_customers['yhat']

lunch_sales_prophet = Prophet()
lunch_sales_prophet.fit((prophet_df_prev_lunch_customers_dinner[['ds','Lunch Sales']]).rename(columns = {
    'Lunch Sales' : 'y'}))
lunch_sales = lunch_sales_prophet.predict(future_final)

lunch_sales = lunch_sales['yhat']

lunch_customers_prophet = Prophet()
lunch_customers_prophet.fit((prophet_df_prev_lunch_customers_dinner[['ds','Lunch Customers']]).rename(columns = {
    'Lunch Customers' : 'y'}))
lunch_customers_pred = lunch_customers_prophet.predict(future_final)

prev_lunch_customers_prophet = Prophet()
prev_lunch_customers_prophet.fit((prophet_df_prev_lunch_customers_dinner[['ds','Prev Lunch Customers']]).rename(columns = {
    'Prev Lunch Customers' : 'y'}))
prev_lunch_customers_pred = prev_lunch_customers_prophet.predict(future_final)

prev_lunch_customers_pred

prev_lunch_customers_pred = prev_lunch_customers_pred['yhat']

prophet_df_prev_lunch_customers_dinner

today_lunch_customers_prophet = Prophet()
today_lunch_customers_prophet.fit((prophet_df_prev_lunch_customers_dinner[['ds','Lunch Customers']]).rename(columns = {
    'Lunch Customers' : 'y'}))
today_lunch_customers_pred = today_lunch_customers_prophet.predict(future_final)

# prev_pageview_prophet = Prophet()
# prev_pageview_prophet.fit((prophet_df_prev_day_customers[['ds','Prev Pageview']]).rename(columns = {
#     'Prev Pageview' : 'y'}))
# pred_prev_pageview = prev_pageview_prophet.predict(future)

# pred_prev_pageview = pred_prev_pageview['yhat']

# current_pageview_prophet = Prophet()
# current_pageview_prophet.fit((prophet_df_prev_day_customers[['ds','Current Pageview']]).rename(columns = {
#     'Current Pageview' : 'y'}))
# current_pageview = current_pageview_prophet.predict(future)

# current_pageview = current_pageview['yhat']

future_final.shape

# current_pageview.head(3)

df['Conventional Holidays'].tail(9)

today_lunch_customers_pred = today_lunch_customers_pred['yhat']

future['National Holidays'].reset_index()

# future['National Holidays'] = prophet_df_prev_day_customers.reset_index()['National Holidays']
# future['Conventional Holidays'] = prophet_df_prev_day_customers.reset_index()['Conventional Holidays']
future_final['Prev Night Customers'] = pred_prev_night_customers
future_final['Prev Night Sales'] = pred_prev_night_sales
future_final['Lunch Sales'] = lunch_sales
future_final['Prev Customers'] = pred_prev_day_customers
future_final['Prev Lunch Customers'] = prev_lunch_customers_pred
future_final['National Holidays'] = future['National Holidays'].reset_index().drop('index', axis = 1)
future_final['Conventional Holidays'] = future['Conventional Holidays'].reset_index().drop('index', axis = 1)
future_final['Lunch Customers'] = today_lunch_customers_pred

# future = future.tail(9)

future_final

future_final.info()

def change_to_int(x):
  return int(np.floor(x+0.5))

future_final['Prev Night Customers'] = future_final['Prev Night Customers'].apply(change_to_int)
future_final['Prev Night Sales'] = future_final['Prev Night Sales'].apply(change_to_int)
future_final['Lunch Sales'] = future_final['Lunch Sales'].apply(change_to_int)
future_final['Prev Customers'] = future_final['Prev Customers'].apply(change_to_int)
future_final['Prev Lunch Customers'] = future_final['Prev Lunch Customers'].apply(change_to_int)
future_final['Lunch Customers'] = future_final['Lunch Customers'].apply(change_to_int)

# future['National Holidays'] = future['National Holidays'].astype(int)

# future['Conventional Holidays'] = future['Conventional Holidays'].astype(int)

future_final

# import pickle
# with open('model_dinner_pickle', 'wb') as f:
#   pickle.dump(prophet_prev_lunch_customers_dinner,f)

forecast = prophet_prev_lunch_customers_dinner.predict(future_final)

forecast

final_forecast = forecast['yhat'].apply(change_to_int)

final_forecast

date = forecast['ds']

date

df = pd.DataFrame(date)

df1 = pd.DataFrame(final_forecast)

df = df.join(df1)

df.rename(columns= {'yhat' : 'Forecast', 'ds' : 'Date'}, inplace= True)

df.to_excel('dinner-forecast.xlsx')
